# -*- coding: utf-8 -*-
"""Pytorch_for_dummies_part 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iL453uC03N3PKBD0_cDi-LEclcfw6G-v
"""

import numpy as np
import math

import torch
import torch.nn as nn
import torchvision
from torch.utils.data import Dataset,DataLoader

DATA_URL = 'https://raw.githubusercontent.com/python-engineer/pytorchTutorial/master/data/wine/wine.csv'

import pandas as pd

data_df = pd.read_csv(DATA_URL)
data_df.head()

# dataframe to numpy

df_npy = data_df.to_numpy(dtype=np.float32)
df_npy,type(df_npy)

df_npy.shape

"""### using Dataset and DataLoader classes"""

# custom Dataset class

class WineDataset(Dataset):

    def __init__(self):
        # Data loading
        self.X = torch.from_numpy(df_npy[:,1:]) # all rows excluding colIndex = 0 
        self.y = torch.from_numpy(df_npy[:,[0]]) # all rows of first column
        self.n_samples = df_npy.shape[0]

    def __getitem__(self,index):
        # returns item at index e.g. dataset[index]
        return self.X[index], self.y[index]

    def __len__(self):
        # returns length of dataset
        return self.n_samples

dataset = WineDataset()
first_data = dataset[0]
features,labels = first_data
print(features,labels)

dataloader = DataLoader(dataset=dataset,
                        batch_size=4,
                        shuffle=True,
                        num_workers=2)

dataiter = iter(dataloader)
data = dataiter.next()
features,labels = data
print(features,labels)

# training loop - dummy 
num_epochs = 2
total_samples = len(dataset)
n_iters = math.ceil(total_samples/4) # batch_size
print(total_samples,n_iters)

for epoch in range(num_epochs):
    # loop over the dataloader - unpack the batch_index and the tuple
    for i,(inputs,labels) in enumerate(dataloader):
        '''
        1.forward 
        2.backward 
        3.updates
        '''
        if (i+1)%5 == 0:
            print(f'Epoch {epoch+1}/{num_epochs}, step {i+1}/{n_iters}, inputs {inputs.shape}')

"""### using transforms """

'''
transforms:

on Images
----------------- 
CenterCrop, Greyscale, Pad, RandomAffine
RandomCrop, RandomHorizonalFlip, RandomRotation
Resize, Scale

on Tensors
-----------------
LinearTransformation,Normalize,RandomErasing

Conversion
-----------------
ToPILImage: from tensor or ndarray
ToTensor: from numpy.ndarray or PILImage

Generic
-----------------
use Lambda

Custom
-----------------
write own class

compose multiple Transforms
------------------------------
composed = transforms.Compose([
                    Rescale(256),
                    RandomCrop(224)
                    ])

# Modify the CustomDataset class to take transform as input in the constructor  

'''

class WineDataset(Dataset):

    def __init__(self,transform=None):
        # Data loading - note we don't convert to tensor here
        self.X = df_npy[:,1:]
        self.y = df_npy[:,[0]]
        self.n_samples = df_npy.shape[0]
        self.transform = transform

    def __getitem__(self,index):
        # returns item at index e.g. dataset[index]
        sample = self.X[index], self.y[index]

        if self.transform:
            sample = self.transform(sample)

        return sample

    def __len__(self):
        # returns length of dataset
        return self.n_samples


# custom transform classes

class ToTensor:
    def __call__(self,sample):
        inputs,targets = sample
        return torch.from_numpy(inputs),torch.from_numpy(targets)

class MulTransform:
    def __init__(self,factor):
        self.factor = factor

    def __call__(self,sample):
        inputs,targets = sample
        inputs *= self.factor
        return inputs,targets

# multiple transforms: transforms.Compose([...])

composed = torchvision.transforms.Compose([ToTensor(),MulTransform(2)])

dataset = WineDataset(transform=composed)

first_data = dataset[0]
features,labels = first_data
print(type(features),type(labels))

